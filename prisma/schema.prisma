generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id          Int           @id @default(autoincrement())
  name        String
  phone       String?
  email       String?
  address     String?
  accounts    CustomerAccount[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  transactions Transaction[]
}

model CustomerAccount {
  id          Int       @id @default(autoincrement())
  customerId  Int
  customer    Customer  @relation(fields: [customerId], references: [id])
  currency    String    // "SAR", "USD", "LOCAL"
  balance     Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([customerId, currency])
}

model Supplier {
  id           Int       @id @default(autoincrement())
  name         String
  phone        String?
  email        String?
  address      String?
  balance      Float     @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  transactions Transaction[]
}

model Transaction {
  id          Int       @id @default(autoincrement())
  type        String    // دائن أو مدين
  amount      Float
  description String?
  date        DateTime  @default(now())
  customerId  Int?
  supplierId  Int?
  customer    Customer? @relation(fields: [customerId], references: [id])
  supplier    Supplier? @relation(fields: [supplierId], references: [id])
}

model StoreSettings {
  id        Int      @id @default(autoincrement())
  storeName String
  logo      String?
  address   String?
  phone     String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
