generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Store {
  id             String       @id @default(cuid())
  name           String
  description    String?
  logo           String?
  owner          User         @relation("StoreOwner", fields: [ownerId], references: [id])
  ownerId        String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  customers      Customer[]
  suppliers      Supplier[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
}

model Organization {
  id          String     @id @default(cuid())
  name        String
  users       User[]
  stores      Store[]
  customers   Customer[]
  suppliers   Supplier[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model User {
  id             String     @id @default(cuid())
  name           String?
  username       String?    @unique
  password       String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  role           String     @default("user")
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  store          Store?     @relation("StoreOwner")
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([organizationId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

model Customer {
  id              Int          @id @default(autoincrement())
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
  store           Store        @relation(fields: [storeId], references: [id])
  storeId         String
  name            String
  phone           String?
  email           String?
  address         String?
  accounts        CustomerAccount[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  transactions    Transaction[]

  @@index([organizationId, storeId])
}

model CustomerAccount {
  id          Int       @id @default(autoincrement())
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  Int
  currency    String    @db.VarChar(5) // "SAR" أو "LOCAL"
  balance     Decimal   @default(0)
  type        String    @db.VarChar(10) // "credit" أو "debit"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([customerId, currency])
}

model Supplier {
  id              Int          @id @default(autoincrement())
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
  store           Store        @relation(fields: [storeId], references: [id])
  storeId         String
  name            String
  phone           String?
  email           String?
  address         String?
  balance         Decimal      @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  transactions    Transaction[]

  @@index([organizationId, storeId])
}

model Transaction {
  id          Int       @id @default(autoincrement())
  customer    Customer? @relation(fields: [customerId], references: [id])
  customerId  Int?
  supplier    Supplier? @relation(fields: [supplierId], references: [id])
  supplierId  Int?
  type        String    // "credit" أو "debit"
  amount      Decimal
  description String?
  date        DateTime  @default(now()) @db.Timestamp(6)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([customerId, date])
}
